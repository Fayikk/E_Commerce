@page "/ForgotPassword/{ForgotNumber}"
@using ECommerce_ForUdemy_Client.Service.IService;
@using ECommerce_ForUdemy_Models;
@inject IAuthenticationService _authenticationService

<head>
    <title>Parola Değiştirme Formu</title>
</head>

    <h2>Parola Değiştirme Formu</h2>

<EditForm Model="newPasswordModel" OnValidSubmit="ChangeUserPassword">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="currentPassword">Current Password:</label>
        <InputText id="currentPassword" @bind-Value="@newPasswordModel.NewPassword" class="form-control" />
        <ValidationMessage For="@(() => newPasswordModel.NewPassword)" />
    </div>

    <div class="form-group">
        <label for="newPassword">New Password:</label>
        <InputText id="newPassword" @bind-Value="@newPasswordModel.ConfirmPassword" class="form-control" />
        <ValidationMessage For="@(() => newPasswordModel.ConfirmPassword)" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password:</label>
        <InputText id="confirmPassword" @bind-Value="@newPasswordModel.ChangePasswordNumber" class="form-control" />
        <ValidationMessage For="@(() => newPasswordModel.ChangePasswordNumber)" />
    </div>

    <button type="submit" class="btn btn-primary">Change Password</button>
</EditForm>



@code {
    [Parameter]
    public string ForgotNumber { get; set; }
    public string NewPassword { get; set; }
    public string ConfirmPassword { get; set; }
    public string ForgotPasswordNumber { get; set; }
    public NewPasswordModel newPasswordModel  = new();

    public async Task ChangeUserPassword()
    {
        newPasswordModel.ChangePasswordNumber = ForgotNumber;
        await _authenticationService.ChangePassword(newPasswordModel);
    }

}
