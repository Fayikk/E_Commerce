@page "/category/create"
@page "/category/edit/{Id:int}"
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@using ECommerce_ForUdemy_Models;
@using E_CommerceForUdemy_Business.Repository.IRepository;

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title</h3>
    <div class="col-12">
        @if (IsLoading)
        {
            //loading gif
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="Category" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationSummary></ValidationSummary>
                <div class="form-group">
                    <label>Name</label>

                    <InputText @bind-Value="Category.Name" class="form-control"></InputText>
                    <ValidationMessage For="(()=>Category.Name)"></ValidationMessage>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="category" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }

    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private CategoryDTO Category { get; set; } = new CategoryDTO();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; } = true;
    protected override async Task OnInitializedAsync()
    {
        if (Id == 0)
        {
            IsLoading = false;

        }
        else
        {
            Category = await _categoryRepository.Get(Id);
            Title = "Edit";
            IsLoading = false;
        }

    }
    private async Task UpsertCategory()
    {

        if (Id == 0)
        {
            var result =await _categoryRepository.Create(Category);
            //if (result)
            //{
            //    _navigationManager.NavigateTo("category");
            //}

        }
        else
        {
            var result =await _categoryRepository.Update(Category);

        }

       
        _navigationManager.NavigateTo("category");



    }
}
