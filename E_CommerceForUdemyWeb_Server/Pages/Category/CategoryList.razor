@page "/category"
@using ECommerce_ForUdemy_Models;
@using E_CommerceForUdemy_Business.Repository.IRepository;
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _js
@inject NavigationManager _navigationManager
@*@attribute [Authorize]*@
<_DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-info">Category</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">
            Add New Category
        </a>
    </div>
    <div class="col-12 p-3">
        @if (Categories.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var objCat in Categories)
                    {
                        <tr>
                            <td>
                                @objCat.Name
                            </td>
                            <td>
                                <NavLink href="@($"category/edit/{objCat.Id}")" class="btn-primary btn">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="(()=>HandleDelete(objCat.Id))">Delete</button>
                            </td>
                        
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                //loading gif
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>
            }
            else
            {
                //no contemt
                <p>No records found</p>
            }
        }    
    </div>
</div>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } =  new List<CategoryDTO>();
    public bool IsLoading { get; set; } 
    private int DeleteCategoryId { get; set; } = 0;
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } 


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (!authState.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}",forceLoad:true);
        }
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            Categories = await _categoryRepository.GetAll();
            IsLoading = false;
            StateHasChanged();
        }
       
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryId = id;
        _js.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
    public async Task ConfirmDelete_Click(bool IsConfirmed)
    {
        if (IsConfirmed && DeleteCategoryId!=0)
        {
            await _categoryRepository.Delete(DeleteCategoryId);
            Categories = await _categoryRepository.GetAll();
           await _js.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
    }
}
